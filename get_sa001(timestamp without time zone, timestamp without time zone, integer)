  -- Function: report.get_sa001(timestamp without time zone, timestamp without time zone, integer)

--DROP FUNCTION report.get_sa001(timestamp without time zone, timestamp without time zone, integer);

CREATE OR REPLACE FUNCTION report.get_sa001(
	IN "date_D" timestamp without time zone, 
	IN "date_F" timestamp without time zone, 
	IN frequence integer)
RETURNS TABLE(
	"Period_date" timestamp without time zone, 
	"Site" character varying, 
	"Customer_code" character varying,
	"Internal_reference" character varying, 
	"InvoiceNumber" character varying, 
	"Value_in_currency" numeric, 
	"Value_in_EUR" numeric, 
	"Value_Budget_in_EUR" numeric, 
	"Selling_price_CUR" numeric, 
	"Selling_price_EUR" numeric, 
	"Currency_code" character varying, 
	"Selling_quantity" numeric, 
	"Variance_price_CUR" numeric, 
	"Variance_price_EUR" numeric, 
	"Variance_value_CUR" numeric, 
	"Variance_value_EUR" numeric, 
	"Selling_date" timestamp without time zone)	AS
$BODY$
DECLARE p_debut timestamp without time zone;
DECLARE p_fin timestamp without time zone;

BEGIN

p_debut = dw.get_period_end("date_D", "frequence");
p_fin = dw.get_period_end("date_F", "frequence");

DROP TABLE IF EXISTS "dates_1" CASCADE;
CREATE TEMPORARY TABLE "dates_1" AS
SELECT p_debut::date + n AS "date", 
	   dw.period_frequency(p_debut::date + n) AS "frequency" 
FROM generate_series(0, p_fin::date - p_debut::date) AS x(n)
WHERE (dw.period_frequency(p_debut::date + n) & frequence != 0);

DROP TABLE IF EXISTS "dates" CASCADE;
CREATE TEMPORARY TABLE "dates" AS
SELECT "date", 
	   LAG("date") OVER (ORDER BY "date") AS "date_prev", 
	   "frequency" 
FROM "dates_1";
CREATE INDEX IDX_dates_date ON "dates"("date")

DROP TABLE IF EXISTS "Sales_over_period" CASCADE;
CREATE TEMPORARY TABLE "Sales_over_period" AS
SELECT "dates"."date"::timestamp without time zone, 
	   "FI-D7_Sales".* 
FROM "dates" 
LEFT JOIN dw."FI-D7_Sales"
ON "FI-D7_Sales"."Selling_date" >= COALESCE("dates"."date_prev", "date_D")
AND "FI-D7_Sales"."Selling_date" <= "dates"."date" 
WHERE "FI-D7_Sales"."Selling_date" <= "date_F"
ORDER BY "FI-D7_Sales"."Site", 
		 dates."date";

DROP TABLE IF EXISTS "Ref_price" CASCADE;
CREATE TEMPORARY TABLE "Ref_price" AS		 
SELECT "FI-D7_Sales"."Internal_reference",
	   SUM ("FI-D7_Sales"."Value_in_currency") As "Ref_value",
	   SUM ("FI-D7_Sales"."Qty") As "Ref_quantity",
	   "FI-D7_Sales"."Site" 
FROM dw."FI-D7_Sales"
INNER JOIN (
	SELECT DISTINCT ON (
		"FI-D7_Sales"."Internal_reference", "FI-D7_Sales"."Site") 
	"FI-D7_Sales"."Internal_reference",
	"FI-D7_Sales"."Selling_date" As "Ref_date",
	"FI-D7_Sales"."Site"
	FROM dw."FI-D7_Sales"
	WHERE "FI-D7_Sales"."Selling_date"<= "date_D"
	ORDER BY "FI-D7_Sales"."Internal_reference", 
		     "FI-D7_Sales"."Site", 
			 "FI-D7_Sales"."Selling_date" DESC) FID7_MaxDate
ON "FI-D7_Sales"."Internal_reference" =FID7_MaxDate."Internal_reference" 
AND "FI-D7_Sales"."Site" =FID7_MaxDate."Site" 
AND "FI-D7_Sales"."Selling_date" =FID7_MaxDate."Ref_date"
GROUP BY "FI-D7_Sales"."Internal_reference", 
	     "FI-D7_Sales"."Selling_date", 
		 "FI-D7_Sales"."Site";

DROP TABLE IF EXISTS "Sales_with_currency" CASCADE;
CREATE TEMPORARY TABLE "Sales_with_currency" AS		 		 
SELECT "Sales_over_period".*,
	Case 
	   WHEN "Ref_price"."Ref_quantity" is Null Then -1
	   WHEN "Ref_price"."Ref_quantity" <> 0 Then "Ref_price"."Ref_value"/"Ref_price"."Ref_quantity" 
	ELSE 0
	END AS "Ref_price",
	   "C00_Sites"."Accounting_currency", 
	   date_trunc('MONTH'::text, "Sales_over_period"."Selling_date") + '1 mon -1 days'::interval AS "eom_date",
	   date_trunc('YEAR'::text, "Sales_over_period"."Selling_date") + '1 year -1 days'::interval AS "eoy_date"
FROM "Sales_over_period" 
JOIN dw."C00_Sites" 
ON "Sales_over_period"."Site"::text = "C00_Sites"."Site"::text
LEFT JOIN "Ref_price" 
ON "Sales_over_period"."Site"::text = "Ref_price"."Site"::text 
AND "Sales_over_period"."Internal_reference"::text = "Ref_price"."Internal_reference"::text;

DROP TABLE IF EXISTS "Sales_with_exchangerate" CASCADE;
CREATE TEMPORARY TABLE "Sales_with_exchangerate" AS	
SELECT "Sales_with_currency".*,
	   COALESCE(exE."ratePerEur", exE_last."ratePerEur_Last")::numeric(15,4) AS "ratePerEur_E",
	   COALESCE(exB."ratePerEur", exB_last."ratePerEur_Last")::numeric(15,4) AS "ratePerEur_B"
FROM "Sales_with_currency"
LEFT JOIN dw."FI-D0_ExchangeRates" AS exE
ON exE."rateType" ='E'
AND "Sales_with_currency"."Accounting_currency" = exE."rateCurrency" 
AND "Sales_with_currency"."eom_date" = exE."rateDate"
LEFT JOIN dw."FI-D0_ExchangeRates_LAST" AS exE_last
ON "Sales_with_currency"."Accounting_currency" = exE_last.rate_cur 
AND exE_last."rate_type" = 'E'
LEFT JOIN dw."FI-D0_ExchangeRates" AS exB
ON exB."rateType" = 'B'
AND "Sales_with_currency"."Accounting_currency" = exB."rateCurrency" 
AND "Sales_with_currency"."eoy_date" = exB."rateDate"
LEFT JOIN dw."FI-D0_ExchangeRates_LAST" AS exB_last
ON "Sales_with_currency"."Accounting_currency" = exB_last.rate_cur 
AND exB_last."rate_type" = 'B';

DROP TABLE IF EXISTS "Sales_final" CASCADE;
CREATE TEMPORARY TABLE "Sales_final" AS	
SELECT "Sales_with_exchangerate"."date",
	   "Sales_with_exchangerate"."Site",
	   "Sales_with_exchangerate"."Customer_code",
	   "Sales_with_exchangerate"."Internal_reference",
	   "Sales_with_exchangerate"."InvoiceNumber",
	   "Sales_with_exchangerate"."Value_in_currency",
	CASE 
	   WHEN "Sales_with_exchangerate"."Accounting_currency" = 'EUR'::bpchar 
	   THEN "Sales_with_exchangerate"."Value_in_currency"::numeric(15,4)
	ELSE ("Sales_with_exchangerate"."Value_in_currency" / "Sales_with_exchangerate"."ratePerEur_E")::numeric(15,4)
	END AS "Value_in_EUR",
	CASE 
	   WHEN "Sales_with_exchangerate"."Accounting_currency" = 'EUR'::bpchar 
	   THEN "Sales_with_exchangerate"."Value_in_currency"::numeric(15,4)
	ELSE ("Sales_with_exchangerate"."Value_in_currency" / "Sales_with_exchangerate"."ratePerEur_B")::numeric(15,4)
	END AS "Value_Budget_in_EUR",
	CASE 
	   WHEN "Sales_with_exchangerate"."Qty" = 0 Then 0::numeric(15,4)
	ELSE ("Sales_with_exchangerate"."Value_in_currency"/"Sales_with_exchangerate"."Qty")::numeric(15,4) 
	END AS "Selling_price_CUR",
	CASE 
	   WHEN "Sales_with_exchangerate"."Qty" = 0 Then 0::numeric(15,4)
	   WHEN "Sales_with_exchangerate"."Accounting_currency" = 'EUR'::bpchar 
	   THEN ("Sales_with_exchangerate"."Value_in_currency"/"Sales_with_exchangerate"."Qty")::numeric(15,4)
	ELSE (("Sales_with_exchangerate"."Value_in_currency" / "Sales_with_exchangerate"."ratePerEur_E")/"Sales_with_exchangerate"."Qty")::numeric(15,4)
	END AS "Selling_price_EUR",
	   "Sales_with_exchangerate"."Currency_code",
	   "Sales_with_exchangerate"."Qty"::numeric(15,4) AS "Selling_quantity",
	CASE 
	   WHEN "Sales_with_exchangerate"."Ref_price"=-1 Then -1::numeric(15,4)
	ELSE "Sales_with_exchangerate"."Ref_price"::numeric(15,4) 
	END AS "Variance_price_CUR",
	CASE 
	   WHEN "Sales_with_exchangerate"."Ref_price"=-1 Then -1::numeric(15,4)
	   WHEN "Sales_with_exchangerate"."Accounting_currency" = 'EUR'::bpchar 
	   THEN "Sales_with_exchangerate"."Ref_price"::numeric(15,4)
	ELSE ("Sales_with_exchangerate"."Ref_price" / "Sales_with_exchangerate"."ratePerEur_E")::numeric(15,4)
	END AS "Variance_price_EUR",
	CASE 
	   WHEN "Sales_with_exchangerate"."Ref_price"=-1 Then 0::numeric(15,4)
	ELSE ("Sales_with_exchangerate"."Ref_price"*"Sales_with_exchangerate"."Qty")::numeric(15,4)
	END AS "Variance_value_CUR",
	CASE 
	   WHEN "Sales_with_exchangerate"."Ref_price" = -1 Then 0::numeric(15,4)
	   WHEN "Sales_with_exchangerate"."Accounting_currency" = 'EUR'::bpchar 
	   THEN ("Sales_with_exchangerate"."Ref_price"*"Sales_with_exchangerate"."Qty")::numeric(15,4)
	ELSE (("Sales_with_exchangerate"."Ref_price" / "Sales_with_exchangerate"."ratePerEur_E")*"Sales_with_exchangerate"."Qty")::numeric(15,4)
	END AS "Variance_value_EUR",
	   "Sales_with_exchangerate"."Selling_date"  
FROM "Sales_with_exchangerate";

RETURN QUERY 

SELECT * 
FROM "Sales_final";

END
$BODY$
  LANGUAGE plpgsql VOLATILE
  COST 100
  ROWS 1000;
ALTER FUNCTION report.get_sa001(
	timestamp without time zone, 
	timestamp without time zone, 
	integer)
OWNER TO avocarbon;

  
